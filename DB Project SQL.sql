CREATE TABLE Users
(
	UID INT AUTO_INCREMENT,
    Username VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Pass VARCHAR(255) NOT NULL,
    _Name VARCHAR(255) NOT NULL,
    CoverPic VARCHAR(255),
    ProfilePic VARCHAR(255),
    Website VARCHAR(255),
    PRIMARY KEY(UID)
);
CREATE TABLE Posts
(
	PID INT AUTO_INCREMENT,
    _Desc VARCHAR(255),
    IMG VARCHAR(255),
    UID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    CreatedAt DATETIME,
    PRIMARY KEY(PID)
    -- CONSTRAINT UidK FOREIGN KEY (UID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE
);
DROP TABLE Postsl;
CREATE TABLE Comments
(
	CID INT AUTO_INCREMENT,
    _Desc VARCHAR(255) NOT NULL,
    CreatedAt DATETIME,
    UID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    PID INT REFERENCES Posts(PID) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (CID)
    -- CONSTRAINT UidKCL FOREIGN KEY (UID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    -- CONSTRAINT PidKCL FOREIGN KEY (PID) REFERENCES PostsL(PID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE Stories
(
	SID INT AUTO_INCREMENT,
    IMG VARCHAR(255) NOT NULL,
    UID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (SID)
    -- CONSTRAINT UidKS FOREIGN KEY (UID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE Relationships
(
	RID INT AUTO_INCREMENT,
    FollowerID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    FollowingID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (RID)
    -- CONSTRAINT Fid1K FOREIGN KEY (FollowerID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    -- CONSTRAINT Fid2K FOREIGN KEY (FollowingID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE Likes
(
	LID INT AUTO_INCREMENT,
    UID INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    PID INT REFERENCES Posts(PID) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (LID)
    -- CONSTRAINT UidKL FOREIGN KEY (UID) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    -- CONSTRAINT PidKL FOREIGN KEY (PID) REFERENCES Posts(PID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE Notifs
(
	NIF INT AUTO_INCREMENT,
    _TO INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    _FROM INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY(NIF)
    -- CONSTRAINT ToK FOREIGN KEY (_TO) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    -- CONSTRAINT FromK FOREIGN KEY (_FROM) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE Messages
(
	MID INT AUTO_INCREMENT,
    _FROM INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    _TO INT REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    msg VARCHAR(255) NOT NULL,
    CreatedAt DATETIME,
    PRIMARY KEY (MID)
    -- CONSTRAINT ToKM FOREIGN KEY (_TO) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE,
    -- CONSTRAINT FromKM FOREIGN KEY (_FROM) REFERENCES Users(UID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- DELIMITER //
-- CREATE PROCEDURE getUser(OUT curs CURSOR)
-- BEGIN
-- 	OPEN curs
-- 	FOR SELECT * FROM USERs;
--     RETURN l_rc;
-- END //
-- DELIMITER ;
-- CALL getUser();

SELECT s.* 
                FROM Stories AS s
                JOIN Relationships 
                ON UID = FollowingID 
                WHERE FollowerID = 20 
                OR UID = 20
                UNION
                SELECT *
                FROM Stories
                WHERE UID = 20;
                
SELECT Username
              FROM Users
              WHERE UID = ANY(SELECT R1.FollowingID 
                              FROM relationships AS R1 
                              JOIN relationships as R2 
                              ON R1.FollowingID = R2.FollowerID 
                              WHERE R1.FollowerID = 1 
                              AND R2.FollowingID = 1);
                              SELECT DISTINCT P.UID FROM Posts AS P WHERE P.PID = 14;
INSERT INTO Notifs (_TO, _FROM) VALUES ((SELECT DISTINCT P.UID FROM Posts AS P WHERE P.PID = 14), 1);